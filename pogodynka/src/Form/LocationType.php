<?php

namespace App\Form;

use App\Entity\Location;
use App\Repository\LocationRepository;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Validator\Constraints\Regex;
class LocationType extends AbstractType
{
    private LocationRepository $locationRepository;

    public function __construct(LocationRepository $locationRepository)
    {
        $this->locationRepository = $locationRepository;
    }

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('city', TextType::class, [
                'constraints' => [
                    new Regex([
                        'pattern' => '/^[A-Z][a-z]*(\s[a-zA-Z]*)?$/',
                        'message' => 'Invalid city name. City should start with Capital name, Capital name allowed only in beggining of words, no digits',
                    ]),
                ],
            ])
            ->add('country', ChoiceType::class, [
                'choices' => array_flip($this->getCountriesWithCountryCodes("")), // had problems here that it was showing numbers, flip helped
                'choice_value' => function ($choice) {
                    return  $this->getCountriesWithCountryCodes($choice); 
                },
                'choice_label' => function ($choice) {
                    return $choice; 
                },
                'required' => false
            ])
            ->add('latitude')
            ->add('longitude');
    }

    private function getCountriesWithCountryCodes($choice)
    {

        $country_List = [
            // no its not manual written
            // yes it is generated by GPT :D
            'Albania' => 'AL',
            'Andorra' => 'AD',
            'Austria' => 'AT',
            'Belarus' => 'BY',
            'Belgium' => 'BE',
            'Bosnia and Herzegovina' => 'BA',
            'Bulgaria' => 'BG',
            'Croatia' => 'HR',
            'Cyprus' => 'CY',
            'Czech Republic' => 'CZ',
            'Denmark' => 'DK',
            'Estonia' => 'EE',
            'Finland' => 'FI',
            'France' => 'FR',
            'Germany' => 'DE',
            'Greece' => 'GR',
            'Hungary' => 'HU',
            'Iceland' => 'IS',
            'Ireland' => 'IE',
            'Italy' => 'IT',
            'Kosovo' => 'XK',
            'Latvia' => 'LV',
            'Liechtenstein' => 'LI',
            'Lithuania' => 'LT',
            'Luxembourg' => 'LU',
            'Malta' => 'MT',
            'Moldova' => 'MD',
            'Monaco' => 'MC',
            'Montenegro' => 'ME',
            'Netherlands' => 'NL',
            'North Macedonia (formerly Macedonia)' => 'MK',
            'Norway' => 'NO',
            'Poland' => 'PL',
            'Portugal' => 'PT',
            'Romania' => 'RO',
            'Russia' => 'RU',
            'San Marino' => 'SM',
            'Serbia' => 'RS',
            'Slovakia' => 'SK',
            'Slovenia' => 'SI',
            'Spain' => 'ES',
            'Sweden' => 'SE',
            'Switzerland' => 'CH',
            'Ukraine' => 'UA',
            'United Kingdom' => 'GB',
            'Vatican City (Holy See)' => 'VA',
        ];
        if ($choice === "") {
            return $country_List;
        } else {
            // Return the value corresponding to the $test key
            return $country_List[$choice] ?? null;

        }
    }

    private function getExistingCities(): array
    {
        // Use LocationRepository to fetch existing cities
        $existingCities = $this->locationRepository->findAllCities();

        $choices = [];
        foreach ($existingCities as $city) {
            $choices[$city] = $city;
        }

        return $choices;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        // Configure the 'locationRepository' and 'countries' options
        $resolver->setRequired(['locationRepository']);
        $resolver->setDefaults([
            'data_class' => Location::class,
        ]);
    }
}
